import json
import os
from datetime import datetime, timedelta
import pandas as pd
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8081585127:AAEZ0QyleeUQY4GI8_rPsAMEmYHt6SmZYp4–°"
DATA_FILE = "data.json"
DEFAULT_BUDGET = 500

# === –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    else:
        return {"expenses": {}, "budget": DEFAULT_BUDGET}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

# === –£–¢–ò–õ–ò–¢–´ ===
def get_today():
    return datetime.now().strftime("%Y-%m-%d")

def get_week_dates():
    today = datetime.now()
    start = today - timedelta(days=today.weekday())
    return [(start + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]

# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É.\n"
                                    "–ö–æ–º–∞–Ω–¥—ã:\n/setbudget 500 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç\n"
                                    "/today ‚Äî —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª —Å–µ–≥–æ–¥–Ω—è\n"
                                    "/week ‚Äî —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤\n/reset ‚Äî —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö")

async def set_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    try:
        new_budget = int(context.args[0])
        data["budget"] = new_budget
        save_data(data)
        await update.message.reply_text(f"–ù–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {new_budget}‚ÇΩ")
    except:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /setbudget 500")

async def today_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    today = get_today()
    total = sum(data["expenses"].get(today, []))
    await update.message.reply_text(f"–°–µ–≥–æ–¥–Ω—è –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total}‚ÇΩ")

async def reset_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_data({"expenses": {}, "budget": DEFAULT_BUDGET})
    await update.message.reply_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")

async def week_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    week = get_week_dates()
    rows = []
    for day in week:
        rows.append([day, sum(data["expenses"].get(day, []))])
    df = pd.DataFrame(rows, columns=["–î–∞—Ç–∞", "–°—É–º–º–∞ (‚ÇΩ)"])
    msg = df.to_string(index=False)
    await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n{msg}")

# === –ó–ê–ü–ò–°–¨ –¢–†–ê–¢–´ ===
async def record_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    today = get_today()
    try:
        amount = int(update.message.text)
        data["expenses"].setdefault(today, []).append(amount)
        save_data(data)
        total = sum(data["expenses"][today])
        await update.message.reply_text(f"–ó–∞–ø–∏—Å–∞–ª {amount}‚ÇΩ. –°–µ–≥–æ–¥–Ω—è –≤—Å–µ–≥–æ: {total}‚ÇΩ")
    except ValueError:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ ‚Äî —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.")

# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===
async def daily_reminder(app):
    chat_ids = app.chat_ids if hasattr(app, "chat_ids") else []
    for chat_id in chat_ids:
        try:
            await app.bot.send_message(chat_id=chat_id, text="–ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è!")
        except:
            pass

async def weekly_summary(app):
    data = load_data()
    week = get_week_dates()
    rows = []
    for day in week:
        rows.append([day, sum(data["expenses"].get(day, []))])
    df = pd.DataFrame(rows, columns=["–î–∞—Ç–∞", "–°—É–º–º–∞ (‚ÇΩ)"])
    msg = df.to_string(index=False)
    chat_ids = app.chat_ids if hasattr(app, "chat_ids") else []
    for chat_id in chat_ids:
        try:
            await app.bot.send_message(chat_id=chat_id, text=f"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n{msg}")
        except:
            pass

# === –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö ===
async def save_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not hasattr(context.application, "chat_ids"):
        context.application.chat_ids = []
    if update.effective_chat.id not in context.application.chat_ids:
        context.application.chat_ids.append(update.effective_chat.id)

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setbudget", set_budget))
    app.add_handler(CommandHandler("today", today_expense))
    app.add_handler(CommandHandler("reset", reset_data))
    app.add_handler(CommandHandler("week", week_report))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, record_expense))
    app.add_handler(MessageHandler(filters.ALL, save_chat_id))

    scheduler = BackgroundScheduler(timezone="Europe/Moscow")
    scheduler.add_job(lambda: app.create_task(daily_reminder(app)), "cron", hour=22, minute=0)
    scheduler.add_job(lambda: app.create_task(weekly_summary(app)), "cron", day_of_week="sun", hour=11, minute=0)
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
